swagger: "2.0"
info:
  title: Recipe Database API
  description: API for managing recipes.
  version: "1.0.0"

host: localhost:5000
basePath: /api
schemes:
  - http

tags:
  - name: Categories
    description: Operations related to categories
  - name: Users
    description: Operations related to users
  - name: Reviews
    description: Operations related to reviews
  - name: Ingredients
    description: Operations related to ingredients
  - name: Recipes
    description: Operations related to Recipes

paths:
  /categories:
    get:
      summary: Retrieve all recipe categories
      description: Fetches all available recipe categories.
      tags:
        - Categories
      responses:
        '200':
          description: A list of categories.
          schema:
            type: array
            items:
              type: object
              properties:
                CategoryID:
                  type: integer
                  example: 1
                CategoryName:
                  type: string
                  example: Italian

  /users:
    get:
      summary: Retrieve users filtered by last name
      description: Fetches a list of users based on a last name filter.
      tags:
        - Users
      parameters:
        - in: query
          name: name
          required: true
          description: The string to filter last names by.
          schema:
            type: string
            example: Smith
        - in: query
          name: starts_with
          required: false
          description: If true, filters users whose last names start with the provided string.
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: A list of users matching the filter criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    UserID:
                      type: integer
                      example: 1
                    FirstName:
                      type: string
                      example: John
                    LastName:
                      type: string
                      example: Smith
                    Email:
                      type: string
                      example: john.smith@example.com

    post:
      summary: Add a new user
      description: Adds a new user to the database.
      tags:
        - Users
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            type: object
            required:
              - FirstName
              - LastName
              - Email
            properties:
              FirstName:
                type: string
                example: John
              LastName:
                type: string
                example: Doe
              Email:
                type: string
                example: johndoe@example.com
      responses:
        '201':
          description: User created successfully.

  /users/{UserID}:
    delete:
      summary: Delete a user
      description: Deletes a user identified by `UserID`.
      tags:
        - Users
      parameters:
        - in: path
          name: UserID
          required: true
          description: The ID of the user to delete.
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully.
        '404':
          description: User not found.

  
    put:
      summary: Update an existing user
      description: Updates a user's details by UserID.
      tags:
        - Users
      parameters:
        - in: path
          name: UserID
          required: true
          description: The ID of the user to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                FirstName:
                  type: string
                  example: "John"
                LastName:
                  type: string
                  example: "Doe"
                Email:
                  type: string
                  example: "john.doe@example.com"
      responses:
        '200':
          description: User updated successfully.
        '404':
          description: User not found.
        '400':
          description: Required fields missing in the request body.




  /Reviews/{RecipeID}:
    get:
      summary: Retrieve reviews for a specific recipe
      description: Retrieves review information for a recipe identified by `RecipeID`.
      tags:
        - Reviews
      parameters:
        - in: path
          name: RecipeID
          required: true
          schema:
            type: integer
          description: The unique identifier of the recipe
      responses:
        '200':
          description: A list of reviews for the specified recipe.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ReviewID:
                      type: integer
                      example: 1
                    RecipeID:
                      type: integer
                      example: 101
                    ReviewerName:
                      type: string
                      example: "Jane Doe"
                    ReviewText:
                      type: string
                      example: "Delicious recipe, easy to follow!"
                    Rating:
                      type: integer
                      example: 5
                    ReviewDate:
                      type: string
                      format: date
                      example: "2023-10-10"
        '404':
          description: No reviews found for the specified RecipeID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No reviews found"


  /ingredients/{recipe_id}:
    get:
      summary: Retrieve ingredients and amounts for a specific recipe
      description: Fetches all ingredients and their amounts for a given recipe ID.
      tags:
        - Ingredients
      parameters:
        - in: path
          name: recipe_id
          required: true
          description: The ID of the recipe to retrieve ingredients for.
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: A list of ingredients with their respective amounts for the specified recipe.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Ingredient:
                      type: string
                      example: "Salt"
                    IngredientsId:
                      type: integer
                      example: 101007
          '404':
          description: No ingredients found for the specified RecipeID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No ingredients found for this recipe"
